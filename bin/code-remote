#!/bin/bash

# script analysed with https://www.shellcheck.net

readonly try_languages=( "python" "go" "php" "node" "java" "rust" "dotnet" "cpp" "sqlserver" )
readonly USAGE="
USAGE:
       code-remote FOLDER|GIT-URL
       code-remote --try LANGUAGE

       LANGUAGE: only the following languages are supported: 
                  ${try_languages[@]} 

"

# make script exit early on errors
set -eE  # BEST: traps error in subshell with right linenumber in code
       # -e  Exit immediately if a command exits with a non-zero status.
       # -E  If set, the ERR trap is inherited by shell functions.
       # We set this also for every function, because when in subshells
       # set -eE is not inherited. By setting it in every function we
       # sure it is enabled again. (set -u and set -x is always inherited in subshells)
       # e.g. when calling a function in command substition
       #   manifest_digest=$(get_manifest_digest_for_a_tag_for_a_specific_os_arch "$image" "$tag")
       #                    `-> runs in subshell
set -u # script ends with signal EXIT when unset variable is used
       # also use "local" and "readonly" keywords to limit scope of declared variables
set -o nounset;set -u

# check required commands
if ! command -v code &> /dev/null
then
   echo "ERROR: 'code' commandline command could not be found"
   echo "       Install using Visual Studio Code with \"Install 'code' command in PATH\" command."
   exit 1
fi

function find_in_array() {
  local searchword="$1"
  shift
  for item in "$@"
  do 
      [[ "$item" == "$searchword" ]] && return 0 
  done
  return 1
}

function code-remote-try {
    set -eE 
    local lang="$1"

    if ! find_in_array "$lang" "${try_languages[@]}" 
    then
       echo "ERROR: The language '$lang' is not available in a try dev-container." 
       echo "       Only the following languages are supported: ${try_languages[@]}"
       return 1 
    fi
    local url="https://github.com/microsoft/vscode-remote-try-$lang"
    code-remote "$url"
}    
    
function code-remote {   
   set -eE 
   local hostfolder
   local devcontfile
   
   while [[ "$#" > 0 && "$1" == -* ]]
   do
      if [[ "$1" == "--help" || "$1" == "-h" ]]
      then
          echo "$USAGE"
          exit 0
      fi
      if [[ "$1" == "--try" || "$1" == "-t" ]]
      then 
          [[ "$#" -lt 2 ]] &&  echo "$USAGE" && exit 1
          lang="$2" 
          code-remote-try "$lang"          
          exit 0
      fi
   done 
   if [[  "$#" -ne "1" ]]
   then
      echo "$USAGE"
      exit 0
   fi 

   hostfolder="$1"
   if [[ "$hostfolder" == git@* || "$hostfolder" == http* ]] ;
   then
      local vscodegitdir="/tmp/.vscode-remote-git-clones"
      local git_url="$hostfolder"
      local hex_encoded_url
      hex_encoded_url=$(printf "%s" "$git_url" | xxd -p)
      hex_encoded_url=${hex_encoded_url//[[:space:]]/}
      hostfolder="$vscodegitdir/$hex_encoded_url"
      if [[ ! -d "$hostfolder" ]]
      then    
          git clone "$git_url" "$hostfolder"
      fi    
   else
       if [[ ! -d "$hostfolder" ]]
       then 
           echo "ERROR: folder '$hostfolder' does not exist"
           exit 1
       fi    
       hostfolder=$(realpath "$hostfolder") 
   fi

   if [[ -e "${hostfolder}/.devcontainer/devcontainer.json"  ]]
   then
       devcontfile="${hostfolder}/.devcontainer/devcontainer.json"
   else  
     if [[ -e "${hostfolder}/.devcontainer.json"  ]]
     then 
         devcontfile="${hostfolder}/.devcontainer.json"
     else
         echo "ERROR: cannot find a devcontainer.json file" 1>&2
         return 1
     fi    
   fi 

   # get workspaceFolder from devcontainer.json
   # if a workspaceFolder is found 
   #    we use that as folder which vscode opens in  the container,
   # otherwise
   #    we assume that the local folder is bound in the /workspaces
   #    folder in the container, and open that folder in vscode
   local containerfolder
   if grep -E '^\s*"workspaceFolder' "$devcontfile" 2>/dev/null >/dev/null
   then
      # workspaceFolder set 
      containerfolder=$(grep -E  '^\s*"workspaceFolder' "$devcontfile" | sed 's/.*:\s*"//' |sed 's/"\s*,\s*$//')
      echo "workspace folder in image: $containerfolder  (no binding used)"
   else    
      # workspaceFolder NOT set 
      # cannot determine containerfolder from workspaceFolder config value in  ${devcontfile} 
      #
      # so we assume if workspaceFolder not set, that either image or dockerfile
      # is set, so then the local folder gets binded in the container at
      # /workspaces/ with same basename:
      basename=$(basename "$hostfolder")
      containerfolder="/workspaces/$basename"
      echo "no workspacefolder in container specified, so we assume the bind: local folder '$hostfolder' to folder '$containerfolder' in container"
   fi    
   local hexencodedhostfolder
   hexencodedhostfolder=$(printf "%s" "$hostfolder" | xxd -p)
   hexencodedhostfolder=${hexencodedhostfolder//[[:space:]]/}

   code --folder-uri "vscode-remote://dev-container+$hexencodedhostfolder/$containerfolder"; 
   
   # from https://code.visualstudio.com/docs/remote/troubleshooting#_connect-to-a-remote-host-from-the-terminal
   # https://code.visualstudio.com/docs/remote/troubleshooting#_connect-to-a-remote-host-from-the-terminal
   # https://github.com/microsoft/vscode-remote-release/issues/2133#issuecomment-618328138
   # https://github.com/microsoft/vscode-remote-release/issues/2133#issuecomment-860863636
   # https://github.com/microsoft/vscode-remote-release/issues/2133#issuecomment-1212180962
   #  
   # we can use 
   #     vscode --folder-uri "vscode-remote://dev-container+$hexencodedhostfolder/$containerfolder"
   # or
   #     vscode --remote  dev-container+$hexencodedhostfolder $containerfolder
   #
   #
   # background info from # https://code.visualstudio.com/remote/advancedcontainers/change-default-source-mount:
   #
   #  If you add the image or dockerFile properties to devcontainer.json, VS Code will automatically "bind" mount your current workspace folder into the container.
   #   cases:
   #    -  https://github.com/microsoft/vscode-remote-try-python -> has "image": ..  => so mounts folder in /workspaces in container
   #    -  /Users/harcok/Documents/help/tools/web/cms_and_wiki_and_websitegenerators/pmwiki/pmwikiconf
   #         or 
   #       git@gitlab.science.ru.nl:harcok/pmwikiconf.git
   #        has ""dockerComposeFile: .. => but not "dockerFile" nor "image"  =>  so does not mount folder in /workspaces in container
   #           => in this case we must supply a workspaceFolder, otherwise vscode does not know which folder to open
   #              note: if not given, then vscode ask's for it in a dialog
   #  note: 
   #     special case in vscode itself: 
   #        Dev Containers: Clone repository in (named) container volume 
   #       -> clones git repo first in (named) container volume
   #        then vscode ignores  WorkspaceFolder (and related mount command) 
   #        and just mounts this volume in /volumes and set it as the
   #        workspacefolder in vscode
}

code-remote "$@"
